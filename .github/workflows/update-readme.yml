name: ü§ñ Auto-Update Profile README

on:
  schedule:
    - cron: '0 6 * * *'  # Cada d√≠a a las 6:00 AM UTC
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  update-readme:
    runs-on: ubuntu-latest
    name: Update README with latest activity

    steps:
    - name: üöÄ Checkout
      uses: actions/checkout@v4

    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: üì¶ Install dependencies
      run: |
        pip install requests PyGithub python-dotenv

    - name: üìä Generate repository stats
      env:
        GITHUB_TOKEN: ${{ secrets.PERSONAL_TOKEN }}
      run: |
        python << 'EOF'
        import os
        import requests
        from datetime import datetime
        from collections import Counter

        username = "masamasa28"
        token = os.environ.get("GITHUB_TOKEN")

        if not token:
            print("‚ùå El token no est√° definido")
            exit(1)

        headers = {
            'Authorization': f'token {token}',
            'Accept': 'application/vnd.github.v3+json'
        }

        print("üîç Obteniendo datos de tus repositorios...")

        repos_url = "https://api.github.com/user/repos?per_page=100&sort=updated"
        repos_response = requests.get(repos_url, headers=headers)

        if repos_response.status_code != 200:
            print(f"‚ùå Error obteniendo repositorios: {repos_response.status_code}")
            exit(1)

        all_repos = repos_response.json()
        real_repos = []
        odoo_detected = False
        languages = Counter()

        for repo in all_repos:
            if not repo['fork'] and repo['size'] > 0:
                commits_url = f"https://api.github.com/repos/{repo['full_name']}/commits"
                commits_response = requests.get(commits_url, headers=headers)
                if commits_response.status_code == 200 and commits_response.json():
                    real_repos.append(repo)
                    print(f"‚úÖ Repositorio encontrado: {repo['name']} ({repo['language'] or 'N/A'})")

                    # Analizar lenguajes
                    lang_response = requests.get(repo['languages_url'], headers=headers)
                    if lang_response.status_code == 200:
                        for lang, count in lang_response.json().items():
                            languages[lang] += count

                    # Detectar Odoo
                    contents_response = requests.get(f"https://api.github.com/repos/{repo['full_name']}/contents", headers=headers)
                    if contents_response.status_code == 200:
                        for file_item in contents_response.json():
                            if isinstance(file_item, dict) and 'name' in file_item:
                                filename = file_item['name'].lower()
                                if any(x in filename for x in ['__manifest__.py', '__openerp__.py', 'odoo.conf', 'addons']):
                                    odoo_detected = True

        # ==== TECH STACK ====
        tech_badges = {
            'Python': '![Python](https://img.shields.io/badge/Python-3776AB?style=for-the-badge&logo=python&logoColor=white)',
            'JavaScript': '![JavaScript](https://img.shields.io/badge/JavaScript-F7DF1E?style=for-the-badge&logo=javascript&logoColor=black)',
            'PHP': '![PHP](https://img.shields.io/badge/PHP-777BB4?style=for-the-badge&logo=php&logoColor=white)',
            'Java': '![Java](https://img.shields.io/badge/Java-ED8B00?style=for-the-badge&logo=openjdk&logoColor=white)',
            'HTML': '![HTML5](https://img.shields.io/badge/HTML5-E34F26?style=for-the-badge&logo=html5&logoColor=white)',
            'CSS': '![CSS3](https://img.shields.io/badge/CSS3-1572B6?style=for-the-badge&logo=css3&logoColor=white)',
            'TypeScript': '![TypeScript](https://img.shields.io/badge/TypeScript-007ACC?style=for-the-badge&logo=typescript&logoColor=white)',
            'Vue': '![Vue.js](https://img.shields.io/badge/Vue.js-35495E?style=for-the-badge&logo=vue.js&logoColor=4FC08D)',
            'C++': '![C++](https://img.shields.io/badge/C++-00599C?style=for-the-badge&logo=cplusplus&logoColor=white)',
            'C': '![C](https://img.shields.io/badge/C-00599C?style=for-the-badge&logo=c&logoColor=white)',
            'Dart': '![Dart](https://img.shields.io/badge/Dart-0175C2?style=for-the-badge&logo=dart&logoColor=white)',
            'Kotlin': '![Kotlin](https://img.shields.io/badge/Kotlin-0095D5?style=for-the-badge&logo=kotlin&logoColor=white)',
            'Swift': '![Swift](https://img.shields.io/badge/Swift-FA7343?style=for-the-badge&logo=swift&logoColor=white)',
            'Go': '![Go](https://img.shields.io/badge/Go-00ADD8?style=for-the-badge&logo=go&logoColor=white)',
            'Rust': '![Rust](https://img.shields.io/badge/Rust-000000?style=for-the-badge&logo=rust&logoColor=white)',
            'Shell': '![Shell](https://img.shields.io/badge/Shell-89E051?style=for-the-badge&logo=gnu-bash&logoColor=white)',
            'Dockerfile': '![Docker](https://img.shields.io/badge/Docker-2496ED?style=for-the-badge&logo=docker&logoColor=white)'
        }

        tech_stack_content = "### **üõ†Ô∏è Stack Tecnol√≥gico**\n*Actualizado autom√°ticamente*\n\n"
        if odoo_detected:
            tech_stack_content += "![Odoo](https://img.shields.io/badge/Odoo-714B67?style=for-the-badge&logo=odoo&logoColor=white)\n"
        for lang in languages:
            if lang in tech_badges:
                tech_stack_content += tech_badges[lang] + "\n"
        tech_stack_content += f"\n**üìä Repositorios analizados:** {len(real_repos)}\n"
        if odoo_detected:
            tech_stack_content += "**üéØ Desarrollo Odoo detectado autom√°ticamente**\n"

        with open("tech_stack.md", "w", encoding="utf-8") as f:
            f.write(tech_stack_content)

        # ==== REPO ANALYSIS ====
        repo_analysis = "### **üìÇ Tus Repositorios Recientes**\n"
        repo_analysis += f"*Actualizado: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')} UTC*\n\n"
        repo_analysis += "| Repositorio | Lenguaje | √öltima Actividad | Tama√±o |\n"
        repo_analysis += "|-------------|----------|-----------------|--------|\n"
        for repo in real_repos[:6]:
            name = repo['name']
            language = repo['language'] or 'N/A'
            updated = datetime.strptime(repo['updated_at'], '%Y-%m-%dT%H:%M:%SZ')
            days_ago = (datetime.utcnow() - updated).days
            size_kb = repo['size']
            size_str = f"{size_kb} KB" if size_kb < 1024 else f"{size_kb//1024} MB"
            time_str = "hoy" if days_ago==0 else f"{days_ago}d"
            repo_analysis += f"| [{name}]({repo['html_url']}) | {language} | {time_str} | {size_str} |\n"

        with open("repo_analysis.md", "w", encoding="utf-8") as f:
            f.write(repo_analysis)

        # ==== FEATURED REPOS ====
        scored_repos = []
        for repo in real_repos:
            updated = datetime.strptime(repo['updated_at'], '%Y-%m-%dT%H:%M:%SZ')
            days_ago = (datetime.utcnow() - updated).days
            score = repo['stargazers_count']*10 + (30 - min(days_ago,30))
            scored_repos.append((repo, score))
        scored_repos.sort(key=lambda x:x[1], reverse=True)

        featured_repos = "### **üåü Proyectos Destacados**\n\n"
        for i,(repo,score) in enumerate(scored_repos[:3],1):
            name = repo['name']
            language = repo['language'] or 'Varios'
            stars = repo['stargazers_count']
            forks = repo['forks_count']
            description = repo['description'] or 'Proyecto personal'
            updated = datetime.strptime(repo['updated_at'], '%Y-%m-%dT%H:%M:%SZ')
            days_ago = (datetime.utcnow() - updated).days
            time_str = "hoy" if days_ago==0 else f"hace {days_ago}d"
            featured_repos += f"{i}. **[{name}]({repo['html_url']})**\n   - **Lenguaje:** {language} | ‚≠ê {stars} | üç¥ {forks}\n   - {description}\n   - *Actualizado: {time_str}*\n\n"

        with open("featured_repos.md","w",encoding="utf-8") as f:
            f.write(featured_repos)

        print("‚úÖ Estad√≠sticas generadas correctamente")
        EOF

    - name: üìù Update README sections
      run: |
        python << 'EOF'
        import re
        from datetime import datetime

        with open('README.md', 'r', encoding='utf-8') as f:
            content = f.read()
        with open('tech_stack.md', 'r', encoding='utf-8') as f:
            tech_stack = f.read()
        with open('repo_analysis.md', 'r', encoding='utf-8') as f:
            repo_analysis = f.read()
        with open('featured_repos.md', 'r', encoding='utf-8') as f:
            featured_repos = f.read()

        content = re.sub(r'<!-- START_SECTION:tech_stack -->.*?<!-- END_SECTION:tech_stack -->',
                         f'<!-- START_SECTION:tech_stack -->\n{tech_stack}<!-- END_SECTION:tech_stack -->', content, flags=re.DOTALL)
        content = re.sub(r'<!-- START_SECTION:repo_analysis -->.*?<!-- END_SECTION:repo_analysis -->',
                         f'<!-- START_SECTION:repo_analysis -->\n{repo_analysis}<!-- END_SECTION:repo_analysis -->', content, flags=re.DOTALL)
        content = re.sub(r'<!-- START_SECTION:featured_repos -->.*?<!-- END_SECTION:featured_repos -->',
                         f'<!-- START_SECTION:featured_repos -->\n{featured_repos}<!-- END_SECTION:featured_repos -->', content, flags=re.DOTALL)

        timestamp = datetime.utcnow().strftime('%d/%m/%Y - %H:%M UTC')
        content = re.sub(r'\*√öltima actualizaci√≥n autom√°tica:.*?\*',
                         f'*√öltima actualizaci√≥n autom√°tica: {timestamp}*', content)

        with open('README.md', 'w', encoding='utf-8') as f:
            f.write(content)
        print("‚úÖ README actualizado correctamente")
        EOF

    - name: üßπ Cleanup temporary files
      run: rm -f tech_stack.md repo_analysis.md featured_repos.md

    - name: üíæ Commit and push if changed
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add README.md
        if git diff --staged --quiet; then
          echo "No hay cambios en el README"
        else
          git commit -m "ü§ñ Auto-update README.md with latest stats"
          git push
          echo "‚úÖ README actualizado y enviado al repositorio"
        fi
